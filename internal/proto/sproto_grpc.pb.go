// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/server/grps/sproto/sproto.proto

package sproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetrixServer_SendMetric_FullMethodName  = "/sproto.metrixServer/SendMetric"
	MetrixServer_GetMetric_FullMethodName   = "/sproto.metrixServer/GetMetric"
	MetrixServer_SendMetrics_FullMethodName = "/sproto.metrixServer/SendMetrics"
)

// MetrixServerClient is the client API for MetrixServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetrixServerClient interface {
	SendMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Error, error)
	GetMetric(ctx context.Context, in *MetricName, opts ...grpc.CallOption) (*Metric, error)
	SendMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Error, error)
}

type metrixServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetrixServerClient(cc grpc.ClientConnInterface) MetrixServerClient {
	return &metrixServerClient{cc}
}

func (c *metrixServerClient) SendMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, MetrixServer_SendMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metrixServerClient) GetMetric(ctx context.Context, in *MetricName, opts ...grpc.CallOption) (*Metric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metric)
	err := c.cc.Invoke(ctx, MetrixServer_GetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metrixServerClient) SendMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, MetrixServer_SendMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetrixServerServer is the server API for MetrixServer service.
// All implementations must embed UnimplementedMetrixServerServer
// for forward compatibility.
type MetrixServerServer interface {
	SendMetric(context.Context, *Metric) (*Error, error)
	GetMetric(context.Context, *MetricName) (*Metric, error)
	SendMetrics(context.Context, *Metrics) (*Error, error)
	mustEmbedUnimplementedMetrixServerServer()
}

// UnimplementedMetrixServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetrixServerServer struct{}

func (UnimplementedMetrixServerServer) SendMetric(context.Context, *Metric) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetric not implemented")
}
func (UnimplementedMetrixServerServer) GetMetric(context.Context, *MetricName) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedMetrixServerServer) SendMetrics(context.Context, *Metrics) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedMetrixServerServer) mustEmbedUnimplementedMetrixServerServer() {}
func (UnimplementedMetrixServerServer) testEmbeddedByValue()                      {}

// UnsafeMetrixServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetrixServerServer will
// result in compilation errors.
type UnsafeMetrixServerServer interface {
	mustEmbedUnimplementedMetrixServerServer()
}

func RegisterMetrixServerServer(s grpc.ServiceRegistrar, srv MetrixServerServer) {
	// If the following call pancis, it indicates UnimplementedMetrixServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetrixServer_ServiceDesc, srv)
}

func _MetrixServer_SendMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrixServerServer).SendMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrixServer_SendMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrixServerServer).SendMetric(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetrixServer_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrixServerServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrixServer_GetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrixServerServer).GetMetric(ctx, req.(*MetricName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetrixServer_SendMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrixServerServer).SendMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrixServer_SendMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrixServerServer).SendMetrics(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// MetrixServer_ServiceDesc is the grpc.ServiceDesc for MetrixServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetrixServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sproto.metrixServer",
	HandlerType: (*MetrixServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMetric",
			Handler:    _MetrixServer_SendMetric_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _MetrixServer_GetMetric_Handler,
		},
		{
			MethodName: "SendMetrics",
			Handler:    _MetrixServer_SendMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/grps/sproto/sproto.proto",
}
